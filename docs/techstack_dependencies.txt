# Prompt-Helper App - Techstack & Dependencies

## Overzicht
Deze app helpt gebruikers bij het zoeken, personaliseren en genereren van content op basis van prompts. De gekozen technologieën bieden een schaalbare, snelle en flexibele oplossing.

---

## 1. Techstack

### **Frontend (React & Vite)**
- **React.js** - Voor een interactieve gebruikersinterface
- **Vite.js** - Supersnelle ontwikkelomgeving en build-tool
- **Tailwind CSS** - Utility-first CSS-framework voor styling
- **React Router** - Routing en paginanavigatie
- **Axios** - Voor API-communicatie
- **React Quill** - Rijke teksteditor voor bewerking van prompts
- **Fuse.js** - Zoekfunctionaliteit met fuzzy search
- **i18next** - Internationalisatie
- **LocalStorage API** - Opslaan van favorieten en voorkeuren
- **React Context API** - Voor state management

### **API Integratie**
- **OpenAI API** - Voor het genereren van content
- **Axios** - HTTP client voor API requests

### **Development & Build Tools**
- **ESLint** - Code linting
- **Prettier** - Code formatting
- **PostCSS** - CSS transformaties
- **Vite** - Build tool en dev server
- **dotenv** - Omgevingsvariabelen beheer

### **Backend & Services**
- **WordPress** - Gebruikt als backend voor prompts, tonen en stijlen.
- **WP REST API** - Voor het ophalen en bewerken van content.
- **Firebase** - Voor authenticatie en gebruikersbeheer.
- **Advanced Custom Fields (ACF)** - Voor aangepaste gegevensopslag.

### **Hosting & Deployment**
- **Vercel** - Voor de hosting van de React-frontend.
- **WordPress Hosting** - Backend via je bestaande WordPress-site.
- **GitHub** - Versiebeheer en samenwerking.
- **Firebase Hosting** - (Optioneel) Voor hosting van auth-gerelateerde functies.

### **Hulpmiddelen en Configuratie**
- **ESLint + Prettier** - Codekwaliteit en consistentie.
- **dotenv** - Beheer van omgevingsvariabelen.
- **React Context API** - Voor state management.
- **Yarn of NPM** - Voor pakketbeheer.

---

## 2. Dependencies (package.json)

### **Core Dependencies**
```json
{
  "dependencies": {
    "@openai/api": "^0.8.0",
    "axios": "^1.6.2",
    "clsx": "^2.0.0",
    "i18next": "^23.7.8",
    "i18next-browser-languagedetector": "^7.2.0",
    "react": "^18.2.0",
    "react-dom": "^18.2.0",
    "react-i18next": "^13.5.0",
    "react-router-dom": "^6.20.1",
    "react-quill": "^2.0.0",
    "fuse.js": "^7.0.0",
    "tailwindcss": "^3.3.5"
  }
}
```

### **Development Dependencies**
```json
{
  "devDependencies": {
    "@types/react": "^18.2.42",
    "@types/react-dom": "^18.2.17",
    "@vitejs/plugin-react": "^4.2.1",
    "autoprefixer": "^10.4.16",
    "eslint": "^8.55.0",
    "eslint-config-prettier": "^9.1.0",
    "eslint-plugin-react": "^7.33.2",
    "eslint-plugin-react-hooks": "^4.6.0",
    "postcss": "^8.4.32",
    "prettier": "^3.1.0",
    "vite": "^5.0.6"
  }
}
```

---

## 3. Installatie en Setup

### **Stap 1: Project Initialisatie**
```bash
npm create vite@latest prompt-helper -- --template react
cd prompt-helper
npm install
```

### **Stap 2: Core Dependencies Installatie**
```bash
npm install axios clsx i18next i18next-browser-languagedetector react-i18next react-router-dom react-quill fuse.js
```

### **Stap 3: Development Dependencies**
```bash
npm install -D @types/react @types/react-dom @vitejs/plugin-react autoprefixer eslint eslint-config-prettier eslint-plugin-react eslint-plugin-react-hooks postcss prettier
```

### **Stap 4: Tailwind CSS Setup**
```bash
npm install -D tailwindcss postcss autoprefixer
npx tailwindcss init -p
```

### **Stap 5: Configuratie Files**

#### **tailwind.config.js**
```js
module.exports = {
  content: [
    "./index.html",
    "./src/**/*.{js,jsx,ts,tsx}",
  ],
  theme: {
    extend: {
      colors: {
        primary: '#4F46E5',
        secondary: '#10B981',
      },
    },
  },
  plugins: [],
}
```

#### **.env**
```
VITE_OPENAI_API_KEY=your-openai-api-key
VITE_API_BASE_URL=your-api-base-url
```

---

## 4. Projectvereisten

### **Systeemvereisten**
- Node.js 16.0 of hoger
- npm 7.0 of hoger
- Modern browsers (Chrome, Firefox, Safari, Edge laatste 2 versies)

### **Development Environment**
- VS Code met ESLint en Prettier extensies
- Git voor versiebeheer
- Terminal toegang

### **Productie Environment**
- Static hosting platform (Vercel/Netlify)
- HTTPS ondersteuning
- Environment variables configuratie

---

## 5. Performance Optimalisatie

### **Build Optimalisatie**
- Code splitting via React.lazy()
- Tree shaking met Vite
- Asset optimalisatie
- Caching strategieën

### **Runtime Optimalisatie**
- Memoization met useMemo en useCallback
- Lazy loading van componenten
- Image optimalisatie
- Performance monitoring

---

## 6. Browser Support

### **Ondersteunde Browsers**
- Chrome (laatste 2 versies)
- Firefox (laatste 2 versies)
- Safari (laatste 2 versies)
- Edge (laatste 2 versies)

### **Polyfills**
- Core-js voor oudere browsers
- Regenerator-runtime voor async/await

---


